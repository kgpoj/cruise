{"version":3,"file":"static/js/341.85f8d6cf.chunk.js","mappings":"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","sources":["components/agent/agent-list/agent-item/agent-actions/add-resource-popover/prompted-input/index.tsx","components/agent/agent-list/agent-item/agent-actions/add-resource-popover/index.tsx"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { Input, InputProps } from 'antd';\nimport styled from 'styled-components';\n\ninterface Props extends InputProps {\n  value?: string;\n  candidates: string[],\n  separator?: string,\n  onInputChange: (value: string) => void,\n  errorMessage?: string\n}\n\nconst INPUT_PADDING_LEFT = 11;\n\nconst StyledInput = styled(Input)`\n  font-size: 12px;\n  position: relative;\n  padding-left: ${INPUT_PADDING_LEFT}px;\n  \n  & input {\n    background: transparent;\n  }\n`;\n\nconst Hint = styled.span`\n  color: #999;\n  position: absolute;\n  left: ${INPUT_PADDING_LEFT}px;\n  z-index: -1;\n`;\n\nconst ErrorMessage = styled.div`\n  color: red;\n  font-size: 12px;\n  margin-top: 5px;\n`;\n\nconst PromptedInput: React.FC<Props> = ({\n  value: propValue = '',\n  candidates,\n  separator = ',',\n  onInputChange,\n  errorMessage,\n  status,\n  ...rest\n}) => {\n  const [inputValue, setInputValue] = useState(propValue);\n  const [hint, setHint] = useState('');\n\n  useEffect(() => {\n    setInputValue(propValue);\n  }, [propValue]);\n\n  useLayoutEffect(() => {\n    onInputChange(inputValue);\n    updateHint(inputValue);\n  }, [inputValue]);\n\n  const candidatesLower = candidates\n    .map((candidate) => candidate.toLowerCase())\n    .sort((a, b) => a.length - b.length);\n\n  const getHint = (typingWord: string | undefined): string => {\n    if (!typingWord) {\n      return '';\n    }\n    const matchedCandidate = candidatesLower.find((word) => word.startsWith(typingWord)) || '';\n\n    return matchedCandidate.slice(typingWord.length);\n  };\n\n  const updateHint = (value: string): void => {\n    const latestValueLower = value.toLowerCase()\n      .split(separator)\n      .pop();\n\n    setHint(value + getHint(latestValueLower));\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setInputValue(e.target.value);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if ((e.key === 'Tab' || e.key === 'ArrowRight') && hint) {\n      e.stopPropagation();\n      e.preventDefault();\n      setInputValue(hint + separator);\n    }\n  };\n\n  return (\n    <>\n      <StyledInput\n        value={inputValue}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        suffix={<Hint>{hint}</Hint>}\n        status={status}\n        {...rest}\n      />\n      {status === 'error' && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    </>\n  );\n};\n\nexport default PromptedInput;\n","import React, { PropsWithChildren, useState } from 'react';\nimport styled from 'styled-components';\nimport { Popover } from 'antd';\nimport { StyledButton } from '../../../../styles';\nimport PromptedInput from './prompted-input';\nimport { Resource, ResourceName } from '../../../../../../interface/Agent';\n\ninterface Props {\n  onConfirm: (resourceIds: string[]) => void;\n}\n\nconst StyledPopover = styled(Popover)`\n  position: relative;\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 130px;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst CancelButton = styled(StyledButton)`\n  background-color: #485362;\n`;\n\nconst XButton = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 12px;\n  background-color: transparent;\n  border: none;\n  font-weight: bold;\n  padding: 0;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary};\n`;\n\nconst VALID_RESOURCES: Resource[] = [\n  { id: '1', name: ResourceName.Firefox },\n  { id: '2', name: ResourceName.Chrome },\n  { id: '3', name: ResourceName.Safari },\n  { id: '4', name: ResourceName.Ubuntu },\n];\nconst ID_NOT_FOUND = 'ID_NOT_FOUND';\nconst getResourceByName = (name: string): Resource | undefined => VALID_RESOURCES\n  .find((r: Resource) => r.name.toLowerCase() === name.toLowerCase());\nconst VALID_RESOURCE_PROMPT = 'Valid Resources: Firefox, Safari, Ubuntu, Chrome';\nconst separator = ',';\n\nconst AddResourcePopover: React.FC<PropsWithChildren<Props>> = ({ children, onConfirm }) => {\n  const [open, setOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [error, setError] = useState(false);\n\n  const validResourceNames: ResourceName[] = VALID_RESOURCES.map((resource) => resource.name);\n\n  const handleCancelClick = (): void => {\n    setOpen(false);\n  };\n\n  const handleOpenChange = (newOpen: boolean): void => {\n    setOpen(newOpen);\n    setInputValue('');\n  };\n\n  const handleInputChange = (value: string): void => {\n    setInputValue(value);\n    setError(false);\n  };\n\n  const checkValidated = (\n    resourceIds: string[],\n  ): boolean => resourceIds.every((resourceId) => resourceId !== ID_NOT_FOUND);\n  const handleAddClick = (): void => {\n    const resourceNames = inputValue.split(separator)\n      .filter((name) => name)\n      .map((name) => name.trim());\n\n    const resourceIds = resourceNames\n      .map((name) => getResourceByName(name)?.id || ID_NOT_FOUND);\n\n    if (!checkValidated(resourceIds)) {\n      setError(true);\n      return;\n    }\n    onConfirm(resourceIds);\n    setOpen(false);\n  };\n\n  const content = (\n    <Content>\n      <XButton\n        onClick={handleCancelClick}\n      >\n        X\n      </XButton>\n      <InputWrapper>\n        <p>Separate multiple resource name with commas</p>\n        <PromptedInput\n          value={inputValue}\n          placeholder={VALID_RESOURCE_PROMPT}\n          candidates={validResourceNames}\n          onInputChange={handleInputChange}\n          status={error ? 'error' : ''}\n          errorMessage={VALID_RESOURCE_PROMPT}\n        />\n      </InputWrapper>\n      <ButtonsWrapper>\n        <StyledButton onClick={handleAddClick}>Add Resources</StyledButton>\n        <CancelButton onClick={handleCancelClick}>Cancel</CancelButton>\n      </ButtonsWrapper>\n    </Content>\n  );\n\n  return (\n    <StyledPopover\n      placement=\"bottomLeft\"\n      content={content}\n      trigger=\"click\"\n      open={open}\n      onOpenChange={handleOpenChange}\n      zIndex={1}\n    >\n      {children}\n    </StyledPopover>\n  );\n};\n\nexport default AddResourcePopover;\n"],"names":["StyledInput","styled","Input","_templateObject","_taggedTemplateLiteral","Hint","_templateObject2","ErrorMessage","_templateObject3","_ref","_ref$value","value","propValue","candidates","_ref$separator","separator","onInputChange","errorMessage","status","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","_useState3","_useState4","hint","setHint","useEffect","useLayoutEffect","updateHint","candidatesLower","map","candidate","toLowerCase","sort","a","b","length","typingWord","latestValueLower","split","pop","find","word","startsWith","slice","_jsxs","_Fragment","children","_jsx","_objectSpread","onChange","e","target","onKeyDown","key","stopPropagation","preventDefault","suffix","StyledPopover","Popover","Content","InputWrapper","ButtonsWrapper","_templateObject4","CancelButton","StyledButton","_templateObject5","XButton","_templateObject6","theme","colors","primary","VALID_RESOURCES","id","name","ResourceName","ID_NOT_FOUND","VALID_RESOURCE_PROMPT","_ref2","onConfirm","open","setOpen","_useState5","_useState6","error","setError","validResourceNames","resource","handleCancelClick","content","onClick","PromptedInput","placeholder","resourceIds","filter","trim","_getResourceByName","r","getResourceByName","every","resourceId","checkValidated","placement","trigger","onOpenChange","newOpen","zIndex"],"sourceRoot":""}